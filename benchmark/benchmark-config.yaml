global:
  memory_sizes:
    - 128
    # - 512
    # - 1024
  concurrent: 1
  rounds: 50
  parallel: false
  stack_name: benchmark
  title: "Lambda OpenTelemetry Benchmarks"
  proxy_function: benchmark-proxy
  description: |
    This benchmark suite compares the performance characteristics of different
    OpenTelemetry instrumentation approaches for AWS Lambda functions.

    We evaluate four different instrumentation methods:
    - **Manual OTLP-to-stdout**: A lightweight approach using minimal dependencies
    - **OpenTelemetry SDK**: Standard auto-instrumentation with the official SDK
    - **AWS Distro for OpenTelemetry (ADOT)**: AWS-optimized distribution
    - **AWS AppSignals**: Native AWS instrumentation solution

    Each method is tested across different scenarios and runtimes to measure:
    - Cold start impact
    - Warm execution overhead
    - Memory utilization
    - End-to-end latency

tests:
  # Basic Function Tests
  - title: "Basic Node.js Function"
    description: |
      Testing a basic Node.js Lambda function to measure the fundamental overhead of instrumenting
      with different solutions:
      
      - **stdout**: Using the stdout exporter with sync mode
      - **otel**: Using the official OpenTelemetry exporter
      - **adot**: Using the AWS Distro for OpenTelemetry
      - **appsignals**: Using AWS Application Signals
      
      This test creates a tree of spans with configurable depth and iterations to measure:
      - Span creation overhead
      - Context propagation
      - Attribute handling
      - Export performance
      
      The sync mode configuration ensures spans are exported before the function returns,
      providing a baseline for instrumentation overhead.
    name: "basic"
    selector: "basic-node"
    payload:
      depth: 2
      iterations: 3
    environment:
      LAMBDA_EXTENSION_SPAN_PROCESSOR_MODE: sync

  - title: "Basic Python Function"
    description: |
      Testing the Python runtime with sync mode instrumentation. This test:
      
      - Measures Python-specific instrumentation overhead
      - Compares different instrumentation approaches in Python
      - Evaluates cold start impact in Python runtime
      - Assesses memory usage patterns
      
      Python's execution model and garbage collection may show different
      characteristics compared to Node.js.
    name: "basic"
    selector: "basic-python"
    payload:
      depth: 2
      iterations: 3
    environment:
      LAMBDA_EXTENSION_SPAN_PROCESSOR_MODE: sync

  # HTTP Function Tests
  - title: "HTTP Node.js Integration"
    description: |
      Testing Node.js Lambda functions with HTTP integration to measure:
      
      - HTTP context propagation
      - Request/response instrumentation
      - Header handling overhead
      - API Gateway integration impact
      
      This test simulates real-world API scenarios with:
      - Standard HTTP headers
      - Query parameters
      - Request context
      - Response handling
    name: "http"
    selector: "http-node"
    payload: "test-events/http.json"
    environment:
      LAMBDA_EXTENSION_SPAN_PROCESSOR_MODE: sync

  - title: "HTTP Python Integration"
    description: |
      Testing Python Lambda functions with HTTP integration, focusing on:
      
      - HTTP request/response handling
      - API Gateway payload processing
      - Request context propagation
      - Response serialization
      
      Compares different instrumentation approaches for HTTP workloads
      in Python runtime, measuring the overhead of tracing HTTP
      operations through API Gateway.
    name: "http"
    selector: "http-python"
    payload: "test-events/http.json"
    environment:
      LAMBDA_EXTENSION_SPAN_PROCESSOR_MODE: sync

  # AWS SDK Tests
  - title: "AWS SDK Node.js Integration"
    description: |
      Testing AWS SDK instrumentation in Node.js runtime:
      
      - AWS SDK v3 auto-instrumentation
      - Service API tracing
      - Error handling and retries
      - Context propagation
      
      Tests common AWS operations:
      - S3 ListBuckets
      - DynamoDB ListTables
      
      Evaluates how different instrumentation methods handle AWS SDK
      calls and maintain context across service boundaries.
    name: "aws"
    selector: "aws-node"
    payload: "test-events/aws.json"
    environment:
      LAMBDA_EXTENSION_SPAN_PROCESSOR_MODE: sync

  - title: "AWS SDK Python Integration"
    description: |
      Testing AWS SDK instrumentation in Python runtime:
      
      - Boto3 auto-instrumentation
      - AWS API tracing
      - Resource cleanup
      - Error propagation
      
      Compares how different instrumentation approaches handle:
      - AWS service calls
      - Authentication context
      - Request retries
      - Error scenarios
    name: "aws"
    selector: "aws-python"
    payload: "test-events/aws.json"
    environment:
      LAMBDA_EXTENSION_SPAN_PROCESSOR_MODE: sync

  # Stream Processing Tests
  - title: "Stream Processing Node.js"
    description: |
      Testing stream processing instrumentation in Node.js:
      
      - Kinesis stream handling
      - Batch record processing
      - Async iteration patterns
      - Error handling
      
      Evaluates instrumentation impact on:
      - Stream record processing
      - Batch size handling
      - Processing latency
      - Memory usage patterns
      
      Uses sample stock price data to simulate real-time
      stream processing scenarios.
    name: "stream"
    selector: "stream-node"
    payload: "test-events/stream.json"
    environment:
      LAMBDA_EXTENSION_SPAN_PROCESSOR_MODE: sync

  - title: "Stream Processing Python"
    description: |
      Testing stream processing instrumentation in Python:
      
      - Kinesis stream handling
      - Batch processing patterns
      - Async processing
      - Resource management
      
      Focuses on Python-specific aspects:
      - Generator usage
      - Memory management
      - Garbage collection
      - Context handling
      
      Compares different instrumentation approaches for
      stream processing workloads in Python.
    name: "stream"
    selector: "stream-python"
    payload: "test-events/stream.json"
    environment:
      LAMBDA_EXTENSION_SPAN_PROCESSOR_MODE: sync 