name: Publish Rust Lambda OTel Lite

on:
  # Trigger on PRs that touch the Rust package
  pull_request:
    paths:
      - 'packages/rust/lambda-otel-lite/**'
    types: [opened, synchronize]
  # Trigger on merges to main that touch the Rust package
  push:
    branches:
      - main
    paths:
      - 'packages/rust/lambda-otel-lite/**'

# Add permissions needed for the workflow
permissions:
  contents: write  # Needed for pushing tags
  id-token: write  # Needed for publishing to crates.io

jobs:
  test:
    strategy:
      matrix:
        include:
          # x64 runner
          - os: ubuntu-24.04
            arch: x64
            rust-version: stable
          # arm64 runner
          - os: ubuntu-24.04-arm
            arch: arm64
            rust-version: stable
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: packages/rust/lambda-otel-lite

    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust-version }}
          components: rustfmt, clippy

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: .

      - name: Run quality checks
        run: |
          cargo fmt --check
          cargo clippy -- -D warnings
          cargo test
          cargo build --release

  publish:
    needs: test
    # Only run on pushes to main, never on PRs
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/rust/lambda-otel-lite

    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: packages/rust/lambda-otel-lite

      - name: Build package
        run: cargo build --release

      - name: Verify package version
        run: |
          PACKAGE_VERSION=$(cargo metadata --format-version 1 | jq -r '.packages[] | select(.name == "lambda-otel-lite") | .version')
          if git tag -l | grep -q "rust-v$PACKAGE_VERSION"; then
            echo "Version $PACKAGE_VERSION already published"
            exit 1
          fi
          echo "Publishing version $PACKAGE_VERSION"

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish

      - name: Create and push tag
        run: |
          PACKAGE_VERSION=$(cargo metadata --format-version 1 | jq -r '.packages[] | select(.name == "lambda-otel-lite") | .version')
          git tag "rust-v$PACKAGE_VERSION"
          git push origin "rust-v$PACKAGE_VERSION" 