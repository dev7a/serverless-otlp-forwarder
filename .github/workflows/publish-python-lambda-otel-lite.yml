name: Publish Python Lambda OTel Lite

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g. 0.8.0)'
        required: true
        type: string
      environment:
        description: 'Override default environment selection (main->pypi, other->testpypi)'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto  # Auto-select based on branch
          - testpypi
          - pypi

jobs:
  publish:
    runs-on: ubuntu-latest
    # Determine environment: if environment input is provided, use it, otherwise use pypi for main branch and testpypi for others
    environment: ${{ inputs.environment != 'auto' && inputs.environment || (github.ref == 'refs/heads/main' && 'pypi' || 'testpypi') }}
    defaults:
      run:
        working-directory: packages/python/lambda_otel_lite

    steps:
      - uses: actions/checkout@v4

      - name: Validate version matches
        run: |
          # Check version in pyproject.toml
          PYPROJECT_VERSION=$(grep -E '^version = "[^"]+"' pyproject.toml | cut -d'"' -f2)
          # Check version in __init__.py
          INIT_VERSION=$(grep -E '^__version__ = "[^"]+"' src/lambda_otel_lite/__init__.py | cut -d'"' -f2)
          # Check version in CHANGELOG.md (looking for [x.y.z] pattern)
          CHANGELOG_VERSION=$(grep -E '^\#\# \[[0-9]+\.[0-9]+\.[0-9]+\]' CHANGELOG.md | head -n1 | cut -d'[' -f2 | cut -d']' -f1)
          
          if [ "$PYPROJECT_VERSION" != "${{ inputs.version }}" ] || [ "$INIT_VERSION" != "${{ inputs.version }}" ] || [ "$CHANGELOG_VERSION" != "${{ inputs.version }}" ]; then
            echo "Version mismatch found:"
            echo "Input version: ${{ inputs.version }}"
            echo "pyproject.toml version: $PYPROJECT_VERSION"
            echo "__init__.py version: $INIT_VERSION"
            echo "CHANGELOG.md version: $CHANGELOG_VERSION"
            exit 1
          fi
          echo "Version ${{ inputs.version }} validated across all files"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine ruff mypy pytest pytest-cov

      - name: Run quality checks
        run: |
          ruff check src/lambda_otel_lite tests
          ruff format --check src/lambda_otel_lite tests
          mypy src/lambda_otel_lite
          pytest

      - name: Build package
        run: |
          rm -rf dist/ build/ *.egg-info/
          python -m build

      - name: Test package installation
        run: |
          python -m venv test_venv
          source test_venv/bin/activate
          pip install dist/*.whl
          pytest
          deactivate
          rm -rf test_venv

      - name: Publish to TestPyPI
        if: ${{ inputs.environment == 'testpypi' || (inputs.environment == 'auto' && github.ref != 'refs/heads/main') }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
          TWINE_REPOSITORY: testpypi
        run: |
          twine upload --repository testpypi dist/*

      - name: Publish to PyPI
        if: ${{ inputs.environment == 'pypi' || (inputs.environment == 'auto' && github.ref == 'refs/heads/main') }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*

      - name: Tag version
        # Only tag when publishing to PyPI (either explicitly or on main branch)
        if: ${{ inputs.environment == 'pypi' || (inputs.environment == 'auto' && github.ref == 'refs/heads/main') }}
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          TAG_NAME="python/lambda-otel-lite/v${{ inputs.version }}"
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists"
            exit 1
          fi
          git tag -a "$TAG_NAME" -m "Release Python lambda-otel-lite v${{ inputs.version }}"
          git push origin "$TAG_NAME" 