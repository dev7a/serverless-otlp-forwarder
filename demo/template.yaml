AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: AWS SAM template for the serverless-otlp-forwarder application.


Globals:
  Function:
    MemorySize: 128
    Timeout: 30
    Architectures:
      - arm64
    LoggingConfig:
      LogFormat: JSON
      ApplicationLogLevel: INFO
      SystemLogLevel: WARN
    Tracing: Active
  
Resources:
  QuotesQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-quotes-queue'
      VisibilityTimeout: 180
      MessageRetentionPeriod: 345600  # 4 days

  BackendApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub '${AWS::StackName}-api'
      StageName: prod
      EndpointConfiguration:
        Type: REGIONAL

  QuoteStorageAPIFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: rust-cargolambda
      BuildProperties:
        Binary: backend
    Properties:
      FunctionName: !Sub '${AWS::StackName}-quote-storage-api'
      CodeUri: ./rust
      Handler: bootstrap
      Runtime: provided.al2023
      Description: 'Backend API for quote storage with CRUD operations'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
      Environment:
        Variables:
          OTEL_SERVICE_NAME: !Sub '${AWS::StackName}-quote-storage-api'
          TABLE_NAME: !Sub '${AWS::StackName}-table'
      Events:
        PostQuote:
          Type: Api
          Properties:
            Path: /quotes
            Method: post
            RestApiId: !Ref BackendApi
        GetQuote:
          Type: Api
          Properties:
            Path: /quotes/{id}
            Method: get
            RestApiId: !Ref BackendApi
        ListQuotes:
          Type: Api
          Properties:
            Path: /quotes
            Method: get
            RestApiId: !Ref BackendApi

  QuoteUIFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: rust-cargolambda
      BuildProperties:
        Binary: frontend
    Properties:
      FunctionName: !Sub '${AWS::StackName}-quote-ui'
      CodeUri: ./rust
      Handler: bootstrap
      Runtime: provided.al2023
      Description: 'User interface for viewing and interacting with quotes'
      FunctionUrlConfig:
        AuthType: NONE
      Environment:
        Variables:
          OTEL_SERVICE_NAME: !Sub '${AWS::StackName}-quote-ui'
          TARGET_URL: !Sub 'https://${BackendApi}.execute-api.${AWS::Region}.amazonaws.com/prod'

  QuoteProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-quote-processor'
      CodeUri: ./python
      Handler: main.lambda_handler
      Runtime: python3.12
      Description: 'Processes quotes from SQS and forwards them to the backend API'
      Environment:
        Variables:
          OTEL_SERVICE_NAME: !Sub '${AWS::StackName}-quote-processor'
          TARGET_URL: !Sub 'https://${BackendApi}.execute-api.${AWS::Region}.amazonaws.com/prod/quotes'
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt QuotesQueue.Arn
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 10

  QuoteGeneratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-quote-generator'
      CodeUri: ./node
      Handler: index.handler
      Runtime: nodejs20.x
      Description: 'Periodically fetches random quotes and sends them to SQS'
      Environment:
        Variables:
          OTEL_SERVICE_NAME: !Sub '${AWS::StackName}-quote-generator'
          TARGET_URL: !Sub 'https://${BackendApi}.execute-api.${AWS::Region}.amazonaws.com/prod/quotes'
          QUOTES_QUEUE_URL: !Ref QuotesQueue
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt QuotesQueue.QueueName
      Events:
        ScheduleEvent:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)
            Description: "Trigger the Lambda function every time period"
            Enabled: true

  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-table'
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: expiry
        Enabled: true

Outputs:
  QuoteUIFunctionArn:
    Description: 'ARN of the Quote UI function'
    Value: !GetAtt QuoteUIFunction.Arn
  QuoteStorageAPIFunctionArn:
    Description: 'ARN of the Quote Storage API function'
    Value: !GetAtt QuoteStorageAPIFunction.Arn
  QuoteProcessorFunctionArn:
    Description: 'ARN of the Quote Processor function'
    Value: !GetAtt QuoteProcessorFunction.Arn
  BackendApiUrl:
    Description: 'URL of the Quote API'
    Value: !Sub 'https://${BackendApi}.execute-api.${AWS::Region}.amazonaws.com/prod/quotes'
  QuoteUIFunctionUrl:
    Description: 'URL of the Quote UI function'
    Value: !GetAtt QuoteUIFunctionUrl.FunctionUrl
